@page "/profile"
@using DateSwipe.Client.Services.DateDecisionService
@using DateSwipe.Client.Services.ProfileService
@using DateSwipe.Client.Services.UserPreferenceService
@using DateSwipe.Shared.DTO
@inject IProfileService ProfileService
@inject ISnackbar Snackbar
@inject IUserPreferenceService UserPreferenceService
@inject IDateDecisionService DateDecisionService
@inject IJSRuntime JSRuntime

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex flex-column align-items-center">
    <MudFileUpload T="IBrowserFile" OnFilesChanged="HandleFilesChanged" SuppressOnChangeWhenInvalid="true">
        <ActivatorContent>
            <div class="avatar-container">
                <MudAvatar Class="mb-2 mt-2" Size="Size.Large">
                    <MudImage Src="@ProfileService.User.ProfilePicture" />
                    <div class="overlay">
                        <MudIcon Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Large" />
                    </div>
                </MudAvatar>
            </div>
        </ActivatorContent>
    </MudFileUpload>
    <MudText Class="mb-1">
        @ProfileService.User.UserName
    </MudText>
    <MudText Typo="Typo.subtitle2">
        Member since @ProfileService.User.DateCreated.ToString("dd.MM.yyyy")
    </MudText>

    <div class="align-self-start w-100">
        <MudText Class="">
            Preferences
        </MudText>
        <MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="d-flex flex-wrap">
            @foreach (var preference in UserPreferences)
            {
                <MudChip T="string" Color="@(SetChipColor(preference))" Variant="Variant.Outlined" OnClose="@(() => SetPreference(preference))">
                    @preference.CategoryName
                </MudChip>
            }
        </MudContainer>
    </div>

    <div class="align-self-start w-100">
        <MudText Class="">
            Liked Dates
        </MudText>
        <div class="slick-slider">
            @foreach (var likedDate in LikedDates)
            {
                <div class="profile-card-container">
                    <div class="profile-card-image-container">
                        <MudCardMedia Image="@likedDate.ImageUrl" Class="profile-card-image" />
                    </div>
                    <MudCardContent Class="profile-card-content">
                        <div class="d-flex justify-content-center flex-row">
                            @foreach (var category in likedDate.Categories)
                            {
                                <MudChip T="string" Color="Color.Primary">@category.Name</MudChip>
                            }
                        </div>
                        <MudText Typo="Typo.h6">@likedDate.Title</MudText>
                        <MudText>@likedDate.Description</MudText>
                    </MudCardContent>
                </div>
            }
        </div>
    </div>
</MudContainer>

<style>
    .avatar-container {
        position: relative;
    }

        .avatar-container .overlay {
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            height: 100%;
            width: 100%;
            opacity: 0;
            transition: .5s ease;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 50%;
        }

        .avatar-container:hover .overlay {
            opacity: 1;
        }

            .avatar-container:hover .overlay MudIcon {
                display: block;
            }

    .overlay MudIcon {
        display: none;
    }

    .profile-card-container {
        width: 200px;
        height: 350px;
        margin: 10px;
        background-color: #fff;
        border-radius: 8px;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .profile-card-image-container {
        width: 100%;
        height: 150px; /* Adjust the height to fit your needs */
    }

    .profile-card-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .profile-card-content {
        padding: 10px;
        text-align: center;
        height: auto; /* Adjust the height to fit your needs */
        overflow: hidden;
        background-color: white;
    }

    /* Slick styles */
    .slick-slider {
        margin: 30px;
    }

    .slick-slide {
        display: flex;
        justify-content: center;
    }

    .slick-prev,
    .slick-next {
        font-size: 2em;
        color: black !important;
        background: white !important;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        display: flex;
        justify-content: center;
        align-items: center;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);
    }

        .slick-prev:hover,
        .slick-next:hover {
            color: white !important;
            background: black !important;
        }
</style>

@code {
    private List<UserPreferencesDTO> UserPreferences { get; set; } = new List<UserPreferencesDTO>();
    private List<DateIdeaDTO> LikedDates { get; set; } = new List<DateIdeaDTO>();

    protected override async Task OnInitializedAsync()
    {
        var response = await ProfileService.GetProfile();

        if (!response.Success)
        {
            Snackbar.Add(response.Message, Severity.Error);
        }

        var preferenceResponse = await UserPreferenceService.GetAllCategoryPrefernces();

        if (!preferenceResponse.Success)
        {
            Snackbar.Add(preferenceResponse.Message, Severity.Error);
        }
        else
        {
            UserPreferences = preferenceResponse.Data;
        }

        var likedDatesResponse = await DateDecisionService.GetLikedDateIdeasAsync();
        if (likedDatesResponse.Success)
        {
            LikedDates = likedDatesResponse.Data;
        }

        await JSRuntime.InvokeVoidAsync("initializeSlick");
    }

    private Color SetChipColor(UserPreferencesDTO preference)
    {
        return preference.IsLiked ? Color.Success : Color.Error;
    }

    private async Task SetPreference(UserPreferencesDTO preference)
    {
        var response = await UserPreferenceService.SetCategoryPreferenceAsync(preference.CategoryId, !preference.IsLiked);

        if (response.Success)
        {
            preference.IsLiked = !preference.IsLiked;
            StateHasChanged();
        }
        else
        {
            Snackbar.Add(response.Message, Severity.Error);
        }
    }

    private async Task HandleFilesChanged(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        if (files.Any())
        {
            var file = files.First();
            const long maxSize = 512000; // 500KB

            try
            {
                if (file.Size > maxSize)
                {
                    throw new Exception("File size exceeds the 500KB limit.");
                }

                using (var stream = file.OpenReadStream(maxSize))
                {
                    var buffer = new byte[file.Size];
                    await stream.ReadAsync(buffer);

                    var response = await ProfileService.UploadProfilePicture(buffer, file.Name);
                    if (response.Success)
                    {
                        ProfileService.User.ProfilePicture = response.Data;
                        Snackbar.Add("Profile picture updated successfully.", Severity.Success);
                    }
                    else
                    {
                        Snackbar.Add(response.Message, Severity.Error);
                    }
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }
}
